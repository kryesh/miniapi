#!/usr/bin/env bash

#If using nightly flag is set - reconfigure rustup
[ "$CHANNEL" == "nightly" ] && rustup default nightly
[ "$CHANNEL" == "nightly" ] && rustup component add rust-src

#Get LLVM version from rustc (needed for cross-lang LTO with c code)
export LLVM_VERSION=$(rustc -Vv | grep ^LLVM | grep -oP "\d+" | head -n 1)
export RUST_VERSION=$(rustc -V | cut -d " " -f 2)
export CC=/usr/bin/clang-${LLVM_VERSION}
export CXX=/usr/bin/clang++-${LLVM_VERSION}

#Prerequisites for llvm install script
apt-get update
apt-get install -y wget software-properties-common lsb-release

#Install LLVM
wget "https://apt.llvm.org/llvm.sh"
chmod +x llvm.sh
./llvm.sh ${LLVM_VERSION}

#Add MUSL target for static binary
export TARGET=x86_64-unknown-linux-musl
rustup target add x86_64-unknown-linux-musl

#Configure Rust/C/C++ optimisations
export CFLAGS="-march=${TARGET_CPU} -mtune=${TARGET_CPU} -O3 -flto -pipe"
export CXXFLAGS="${CFLAGS}"
export RUSTFLAGS="-C opt-level=3 -C target-cpu=${TARGET_CPU} -C target-feature=+crt-static -C link-self-contained=yes -C linker-plugin-lto -C linker=clang-${LLVM_VERSION} -C link-arg=-fuse-ld=lld-${LLVM_VERSION} -C link-arg=-Wl,-O3,--sort-common,--as-needed,--lto-partitions=1"

echo
echo "Building with environment:"
export

#Clean any cargo information left over from host
cargo clean
cargo update

#Enable build-std to minimise binary size + LTO across standard library if using nightly; otherwise build normally
if [ "$CHANNEL" == "nightly" ]
then
    cargo +nightly build -Z build-std-features=panic_immediate_abort -Z build-std=panic_abort,core,std,alloc --target ${TARGET} --release
else
    cargo build --target ${TARGET} --release
fi

#Strip binary
strip target/${TARGET}/release/${OUTFILE}

echo
echo "Built $OUTFILE for target cpu $TARGET_CPU"
echo

cp target/x86_64-unknown-linux-musl/release/${OUTFILE} ./${OUTFILE}